        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * CS362-004 Summer 2017 Assignment 5
        -:    3: * randomtestadventurer.c
        -:    4: *
        -:    5: * Patrick Kwong
        -:    6: * kwongp@oregonstate.edu
        -:    7: * 
        -:    8: * Random test generator for Adventurer using teammate(cuddhys)'s dominion code
        -:    9: * - reveal cards from deck until you reveal 2 treasure cards
        -:   10: * - put 2 treasure cards in hand and discarded other revealed cards
        -:   11: * 
        -:   12: * Used provided cardtest4.c, dominion.c, and testUpdateCoins.c provided code
        -:   13: * -----------------------------------------------------------------------
        -:   14: * Include the following lines in the makefile:
        -:   15: *
        -:   16: * randomtestadventurer: randomtestadventurer.c dominion.o rngs.o
        -:   17: *      gcc -o randomtestadventurer -g randomtestadventurer.c dominion.o rngs.o $(CFLAGS)
        -:   18: */
        -:   19:
        -:   20:#include "dominion.h"
        -:   21:#include "dominion_helpers.h"
        -:   22:#include <string.h>
        -:   23:#include <stdio.h>
        -:   24:#include <assert.h>
        -:   25:#include "rngs.h"
        -:   26:#include <stdlib.h>
        -:   27:#include <time.h>
        -:   28:#include <math.h>
        -:   29:#include <stdbool.h>
        -:   30:
        -:   31:#define TEST_RUNS 1000
        -:   32:
        -:   33:// prototype
        -:   34:int adventurerFunc(int currentPlayer, struct gameState *state);
        -:   35:
function main called 1 returned 100% blocks executed 84%
        1:   36:int main() {
        -:   37:    int i, j, r, z;
        -:   38:    int numPlayer;
        1:   39:    int bugCount = 0;
        1:   40:    int flag = 0; // flag for other player piles
        -:   41:    int prevCount, afterCount;
        -:   42:	struct gameState G, prevG;
        1:   43:	int seed = 1000;
        1:   44:	srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        -:   45:	int k[10]; // for kingdom cards
        -:   46:	int numKingdomCards;
        -:   47:	bool haveCard;
        -:   48:	int treasureNum, treasureDraw;
        1:   49:	int pass = 0; // track the number of passes
        1:   50:	int fail = 0; // track the number of fails
        -:   51:	
        1:   52:	printf("----------------------------------------------\n");		
call    0 returned 100%
        1:   53:	printf(" Testing Random Test Generator for Adventurer\n");
call    0 returned 100%
        1:   54:	printf("----------------------------------------------\n");	
call    0 returned 100%
        -:   55:	
     1001:   56:	for(z = 1; z <= TEST_RUNS; z++) // test for loop
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   57:	{
        -:   58:		// random kingdom cards set (9 random with adventurer card)
     1000:   59:		numKingdomCards = 0;
    15402:   60:		while(numKingdomCards < 10)
branch  0 taken 93%
branch  1 taken 7% (fallthrough)
        -:   61:		{
    13402:   62:			haveCard = false;
    13402:   63:			r = (rand() % 20 + 7); // gets a random kingdom card
call    0 returned 100%
        -:   64:			
        -:   65:			// check if already have card in kingdom set k
    81109:   66:			for(i = 0; i < numKingdomCards; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    67707:   67:				if(k[i] == r)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
     3402:   68:					haveCard = true;
        -:   69:			
        -:   70:			// if we don't have it, add it to k set and increment the numKingdomCards
    13402:   71:			if(!haveCard)
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
        -:   72:			{
    10000:   73:				k[numKingdomCards] = r;
    10000:   74:				numKingdomCards++;
        -:   75:			}
        -:   76:		}
        -:   77:		// now with random set, we have to make sure adventurer card is in the kingdom pile
        -:   78:		// if not we'll randomly replace one of the 10 kindgom cards with an adventurer.
     1000:   79:		haveCard = false;
        -:   80:		// check 10 kingdom pile for adventurer
    11000:   81:		for(i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   82:		{
    10000:   83:			if(k[i] == adventurer)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:   84:			{
      487:   85:				haveCard = true;
        -:   86:			}
        -:   87:		}
        -:   88:		// no adventurer found, have to randomly add it.
     1000:   89:		if(!haveCard)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
        -:   90:		{
      513:   91:			r = (rand() % 10); // random position
call    0 returned 100%
      513:   92:			k[r] = adventurer;
        -:   93:		}
        -:   94:		
        -:   95:		// random number of players from 2 to 5
     1000:   96:		numPlayer = ((rand() % 3) + 2);
call    0 returned 100%
        -:   97:
     1000:   98:		printf("------------------------------------\n");
call    0 returned 100%
     1000:   99:		printf(" Starting Test #%d for Adventurer\n", z);
call    0 returned 100%
     1000:  100:		printf("------------------------------------\n");
call    0 returned 100%
        -:  101:		
     1000:  102:		memset(&G, 23, sizeof(struct gameState));   // clear the game state
     1000:  103:		initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:  104:		
        -:  105:		// set random deck count for each player
     4014:  106:		for(i = 0; i < numPlayer; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
     3014:  107:			G.deckCount[i] = (rand() % (MAX_DECK/numPlayer));
call    0 returned 100%
        -:  108:		
        -:  109:		// fill each players' decks with random cards
     4014:  110:		for(i = 0; i < numPlayer; i++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  111:		{
   252515:  112:			for(j = 0; j < G.deckCount[i]; j++) 
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:  113:			{
   249501:  114:				r = rand() % 3;
call    0 returned 100%
   249501:  115:				switch(r) 
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 33%
branch  3 taken 0%
        -:  116:				{
    83160:  117:					case 0: G.deck[i][j] = (rand() % 4); // victory card 
call    0 returned 100%
    83160:  118:						break;
    83143:  119:					case 1: G.deck[i][j] = (rand() % 3) + 4; // treasuer card 
call    0 returned 100%
    83143:  120:						break;
    83198:  121:					case 2: G.deck[i][j] = k[(rand() % 10)]; // kingdom card 
call    0 returned 100%
    83198:  122:						break;
        -:  123:				}
        -:  124:			}
        -:  125:		}
        -:  126:		
        -:  127:		// initialize counters
     1000:  128:		treasureNum = 0; 
     1000:  129:		treasureDraw = 0;
     1000:  130:		bugCount = 0;
        -:  131:		
        -:  132:		// get the number of treasures in deck
    88884:  133:		for(i = 0; i < G.deckCount[0]; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
    87884:  134:			if(G.deck[0][i] == copper || G.deck[0][i] == silver || G.deck[0][i] == gold)
branch  0 taken 89% (fallthrough)
branch  1 taken 11%
branch  2 taken 88% (fallthrough)
branch  3 taken 12%
branch  4 taken 14% (fallthrough)
branch  5 taken 86%
    29243:  135:				treasureNum++;
        -:  136:			
     1000:  137:		printf("\nNumber of treasures in deck: %d.\n", treasureNum);
call    0 returned 100%
        -:  138:		
        -:  139:		// calculated expected treasure to draw from adventure card
     1000:  140:		if(treasureNum == 0)
branch  0 taken 2% (fallthrough)
branch  1 taken 98%
       17:  141:			treasureDraw = 0;
      983:  142:		else if(treasureNum == 1)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       14:  143:			treasureDraw = 1;
        -:  144:		else
      969:  145:			treasureDraw = 2;	
        -:  146:		
     1000:  147:		memcpy(&prevG, &G, sizeof(struct gameState)); //create clone of game state to run tests on
        -:  148:		
        -:  149:		// adventurer_func(&G); // my previous code
        -:  150:		// modifications to be able to use teammates's adventurer function
     1000:  151:		int currentPlayer = 0;
     1000:  152:		adventurerFunc(currentPlayer, &G);
call    0 returned 100%
        -:  153:		
        -:  154:		/* tried cardEffect instead of my refactored function
        -:  155:		int handPos, choice1, choice2, choice3, bonus;
        -:  156:		choice1 = choice2 = choice3 = bonus = 0;
        -:  157:		
        -:  158:		// find hand position of adventurer card
        -:  159:		for(i = 0; i < G.handCount[0]; i++)
        -:  160:		{
        -:  161:			if(G.hand[0][i] == adventurer)
        -:  162:			{
        -:  163:				handPos = i;
        -:  164:			}
        -:  165:		}
        -:  166:		
        -:  167:		cardEffect(adventurer, choice1, choice2, choice3, &G, handPos, &bonus);
        -:  168:		*/
        -:  169:		// printf("Deck Count: %d\n", G.deckCount[0]);
        -:  170:		/* check that deck, discard, hand contents are random
        -:  171:		printf("Deck Contents\n");
        -:  172:		for(i = 0; i < G.deckCount[0]; i++)
        -:  173:			printf("Position %d, Card: %d\n", i, G.deck[0][i]);
        -:  174:		
        -:  175:		printf("Discard Contents\n");
        -:  176:		for(i = 0; i < G.discardCount[0]; i++)
        -:  177:			printf("Position %d, Card: %d\n", i, G.discard[0][i]);
        -:  178:
        -:  179:		printf("Hand Contents\n");
        -:  180:		for(i = 0; i < G.handCount[0]; i++)
        -:  181:			printf("Position %d, Card: %d\n", i, G.hand[0][i]);
        -:  182:		*/
        -:  183:		
        -:  184:		// get hand counts
     1000:  185:		prevCount = prevG.handCount[0];
     1000:  186:		afterCount = G.handCount[0];
        -:  187:				
        -:  188:		// check if correct number of cards after adventurer card
     1000:  189:		printf("\nChecking if correct number of cards after using Adventurer.\n");
call    0 returned 100%
     1000:  190:		printf("Previous hand count: %d, After Adventurer: %d\n", prevCount, afterCount);
call    0 returned 100%
     1000:  191:		printf("Expected hand count after Adventurer: %d\n", (prevCount + (treasureDraw - 1)));
call    0 returned 100%
     1000:  192:		if((prevCount + (treasureDraw - 1)) != G.handCount[0])
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  193:		{
     1000:  194:			printf("Bug!!! Ended with the incorrect number of cards in hand after Adventurer.\n");
call    0 returned 100%
     1000:  195:			bugCount++;
        -:  196:		}
        -:  197:		else
    #####:  198:			printf("Great! Ended with the correct number of cards in hand after Adventurer.\n");
call    0 never executed
        -:  199:
        -:  200:		// check if adventurer added the only treasure cards to hand 
     1000:  201:		printf("\nChecking if Adventurer adds only treasure cards to hand.\n");
call    0 returned 100%
     1000:  202:		if(G.hand[0][G.handCount[0]-2] != copper && G.hand[0][G.handCount[0]-2] != silver && G.hand[0][G.handCount[0]-2] != gold)
branch  0 taken 64% (fallthrough)
branch  1 taken 37%
branch  2 taken 48% (fallthrough)
branch  3 taken 52%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  203:		{
    #####:  204:			printf("Bug!!! Adventurer added a card beside a treasure.\n");
call    0 never executed
    #####:  205:			bugCount++;
        -:  206:		}
     1000:  207:		else if(G.hand[0][G.handCount[0]-1] != copper && G.hand[0][G.handCount[0]-1] != silver && G.hand[0][G.handCount[0]-1] != gold)
branch  0 taken 66% (fallthrough)
branch  1 taken 34%
branch  2 taken 50% (fallthrough)
branch  3 taken 50%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
        -:  208:		{
    #####:  209:			printf("Bug!!! Adventurer added a card beside a treasure.\n");
call    0 never executed
    #####:  210:			bugCount++;
        -:  211:		}
        -:  212:		else
     1000:  213:			printf("Great! Adventurer added only treasure cards to hand.\n");
call    0 returned 100%
        -:  214:
        -:  215:		// check if adventurer drew enough cards from deck 
     1000:  216:		printf("\nChecking if Adventurer drew enough cards to hand.\n");
call    0 returned 100%
     1000:  217:		if(prevG.deckCount[0] - treasureDraw < G.deckCount[0])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  218:		{
    #####:  219:			printf("Bug!!! Adventurer didn't draw enough cards from the deck.\n");
call    0 never executed
    #####:  220:			bugCount++;
        -:  221:		}
        -:  222:		else
     1000:  223:			printf("Great! Adventurer drew enough cards from deck.\n");
call    0 returned 100%
        -:  224:
        -:  225:		// check if adventurer discarded the correct number cards to hand 
     1000:  226:		printf("\nChecking if Adventurer card discarded correct number of cards to hand.\n");
call    0 returned 100%
     1000:  227:		printf("Previous deck count: %d cards, After Adventurer: %d cards\n", prevG.deckCount[0], G.deckCount[0]);    
call    0 returned 100%
     1000:  228:		printf("Previous discard count: %d cards, After Adventurer: %d cards\n", prevG.discardCount[0], G.discardCount[0]);
call    0 returned 100%
     1000:  229:		printf("Expected deck count after Adventurer: %d card.\n", (prevG.deckCount[0] - treasureDraw));
call    0 returned 100%
     1000:  230:		if((prevG.deckCount[0] - G.deckCount[0]) == (G.deckCount[0] - prevG.deckCount[0] + 1))
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  231:		{
    #####:  232:			printf("Bug!!! Adventurer discarded the incorrect number of cards to hand.\n");
call    0 never executed
    #####:  233:			bugCount++;
        -:  234:		}
        -:  235:		else
     1000:  236:			printf("Great! Adventurer discarded the correct number of cards to hand.\n");
call    0 returned 100%
        -:  237:
        -:  238:		// check if adventurer altered other player's cards
     1000:  239:		printf("\nChecking if adventurer card altered other player's hand.\n");
call    0 returned 100%
     1000:  240:		if(prevG.handCount[1] != G.handCount[1])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  241:		{
    #####:  242:			printf("Bug!!! Adventurer altered other player's cards\n");
call    0 never executed
    #####:  243:			bugCount++;
        -:  244:		}
     1000:  245:		else if(prevG.deckCount[1] != G.deckCount[1])
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  246:		{
    #####:  247:			printf("Bug!!! Adventurer altered other player's cards\n");
call    0 never executed
    #####:  248:			bugCount++;
        -:  249:		}
     1000:  250:		else if(prevG.discardCount[1] != G.discardCount[1]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  251:			printf("Bug!!! Adventurer altered other player's cards\n");
call    0 never executed
    #####:  252:			bugCount++;
        -:  253:		}
        -:  254:		else
     1000:  255:			printf("Great! Adventurer didn't alter other player's cards.\n");
call    0 returned 100%
        -:  256:		
        -:  257:		// check if Adventurer altered the victory and kingdom piles
     1000:  258:		printf("\nChecking if Adventurer altered the Victory and Kingdom piles.\n");
call    0 returned 100%
     1000:  259:		int arraySize = sizeof(G.supplyCount) / sizeof(int);
    28000:  260:		for(i = 0; i < arraySize; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
    27000:  261:			if(G.supplyCount[i] != prevG.supplyCount[i]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  262:				flag = 1;
        -:  263:			}
        -:  264:		}
     1000:  265:		if(flag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1000:  266:			printf("Great! Adventurer didn't alter the Victory and Kingdom piles.\n");
call    0 returned 100%
        -:  267:		else
        -:  268:		{
    #####:  269:			printf("Bug!!! Kingdom/Victory supplies have been altered!\n");
call    0 never executed
    #####:  270:			bugCount++;
        -:  271:		}
        -:  272:		
        -:  273:		// output the test results overall
     1000:  274:		printf("--------------------------------------------------\n");
call    0 returned 100%
     1000:  275:		printf("Test #%d results for Adventurer\n", z);
call    0 returned 100%
     1000:  276:		printf("--------------------------------------------------\n");
call    0 returned 100%
        -:  277:
     1000:  278:		if(bugCount == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  279:		{
    #####:  280:			printf("All tests passed for the Adventurer!\n\n");
call    0 never executed
    #####:  281:			pass++;
        -:  282:		}
        -:  283:		else
        -:  284:		{
     1000:  285:			printf("Adventurer failed for %d condition(s), check above for which ones.\n\n", bugCount);
call    0 returned 100%
     1000:  286:			fail++;
        -:  287:		}
        -:  288:		
        -:  289:		/* checking deck, discard, hand contents
        -:  290:		printf("Deck Contents\n");
        -:  291:		for(i = 0; i < G.deckCount[0]; i++)
        -:  292:			printf("Position %d, Card: %d\n", i, G.deck[0][i]);
        -:  293:		
        -:  294:		printf("Discard Contents\n");
        -:  295:		for(i = 0; i < G.discardCount[0]; i++)
        -:  296:			printf("Position %d, Card: %d\n", i, G.discard[0][i]);
        -:  297:
        -:  298:		printf("Hand Contents\n");
        -:  299:		for(i = 0; i < G.handCount[0]; i++)
        -:  300:			printf("Position %d, Card: %d\n", i, G.hand[0][i]);
        -:  301:		*/
        -:  302:		
        -:  303:	}
        -:  304:	
        -:  305:	// output the final test results overall
        1:  306:	printf("---------------------------------------------------\n");
call    0 returned 100%
        1:  307:	printf("Final Testing results for Adventurer\n");
call    0 returned 100%
        1:  308:	printf("---------------------------------------------------\n");
call    0 returned 100%
        -:  309:
        1:  310:	if(fail == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  311:		printf("All tests passed for the Adventurer! Amazing!\n\n");
call    0 never executed
        -:  312:	else
        1:  313:		printf("Adventurer passed %d tests and failed %d tests, check above for which ones.\n\n", pass, fail);
call    0 returned 100%
        -:  314:		
        1:  315:	return 0;
        -:  316:}
