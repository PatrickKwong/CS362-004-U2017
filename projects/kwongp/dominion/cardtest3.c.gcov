        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* -----------------------------------------------------------------------
        -:    3: * CS362-004 Summer 2017 Assignment 3
        -:    4: * cardtest3.c
        -:    5: * 
        -:    6: * Patrick Kwong
        -:    7: * kwongp@oregonstate.edu
        -:    8: *
        -:    9: * Unit test for my refactored council_room card function: council_room_func
        -:   10: * player that plays council_room draws 4 cards, other players draw 1 card
        -:   11: * player gets a extra buy
        -:   12: * Used provided cardtest4.c and testUpdateCoins.c examples
        -:   13: * -----------------------------------------------------------------------
        -:   14: * Include the following lines in the makefile:
        -:   15: *
        -:   16: * cardtest3: cardtest3.c dominion.o rngs.o
        -:   17: *      gcc -o cardtest3 -g cardtest3.c dominion.o rngs.o $(CFLAGS)
        -:   18: */
        -:   19:
        -:   20:#include "dominion.h"
        -:   21:#include "dominion_helpers.h"
        -:   22:#include <string.h>
        -:   23:#include <stdio.h>
        -:   24:#include <assert.h>
        -:   25:#include "rngs.h"
        -:   26:#include <stdlib.h>
        -:   27:#include <time.h>
        -:   28:#include <math.h>
        -:   29:
function main called 1 returned 100% blocks executed 75%
        1:   30:int main() {
        -:   31:    int i;
        -:   32:    int seed;
        1:   33:    int numPlayer = 2;
        1:   34:    int bugCount = 0;
        1:   35:    int flag = 0;
        1:   36:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   37:               , remodel, smithy, village, baron, great_hall};
        -:   38:    struct gameState G, prevG;
        1:   39:    seed = (rand() % 100);
call    0 returned 100%
        -:   40:
        1:   41:    printf("\nTesting refactored Council Room card function\n");
call    0 returned 100%
        1:   42:    printf("-----------------------------------------------\n");
call    0 returned 100%
        -:   43:    
        1:   44:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   45:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        -:   46:
        1:   47:    gainCard(council_room, &G, 2, 0); // add council_room card to player 1's hand
call    0 returned 100%
        1:   48:    memcpy(&prevG, &G, sizeof(struct gameState)); //create clone of game state to run tests on
        -:   49:
        1:   50:    council_room_func(G.handCount[0], &G);
call    0 returned 100%
        -:   51:
        -:   52:    // check if hand count correct after Council Room 
        1:   53:    printf("\nChecking hand count is correct after using refactored Council Room card.\n");
call    0 returned 100%
        1:   54:    printf("Previous hand count: %d, After Council Room: %d\n", prevG.handCount[0], G.handCount[0]);
call    0 returned 100%
        1:   55:    printf("Expected hand count after Council Room: 9 (+3 = +4 drawn from Council Room and -1 from discarding Council Room.\n");
call    0 returned 100%
        1:   56:    if(prevG.handCount[0]+3 != G.handCount[0]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   57:        printf("Bug!!! Ended with the incorrect number of cards in hand after Council Room.\n");
call    0 returned 100%
        1:   58:        bugCount++;
        -:   59:    }
        -:   60:    else
    #####:   61:        printf("Great! Ended with the correct number of cards in hand after Council Room.\n");
call    0 never executed
        -:   62:
        -:   63:    // check if Council Room drew the correct cards from deck
        1:   64:    printf("\nChecking if refactored Council Room card drew enough cards to hand.\n");
call    0 returned 100%
        1:   65:    printf("Previous deck count: %d, After Council Room: %d\n", prevG.deckCount[0], G.deckCount[0]);
call    0 returned 100%
        1:   66:    printf("Council Room drew: %d cards. Expected to draw 4 cards.\n", prevG.deckCount[0] - G.deckCount[0]);
call    0 returned 100%
        1:   67:    if((prevG.deckCount[0] - G.deckCount[0]) != 4){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   68:        printf("Bug!!! Council Room didn't draw correct nunmber of cards from the deck.\n");
call    0 returned 100%
        1:   69:        bugCount++;
        -:   70:    }
        -:   71:    else
    #####:   72:        printf("Great! Council Room drew correct number of cards from deck.\n");
call    0 never executed
        -:   73:
        -:   74:    // check if Council Room gave player another buy
        1:   75:    printf("\nChecking if refactored Council Room card gave player another buy.\n");
call    0 returned 100%
        1:   76:    printf("Previous buy count: %d, After Council Room: %d\n", prevG.numBuys, G.numBuys);
call    0 returned 100%
        1:   77:    printf("Expected to get +1 buys.\n");
call    0 returned 100%
        1:   78:    if((G.numBuys - prevG.numBuys) != 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   79:        printf("Bug!!! Council Room didn't add a buy for player.\n");
call    0 never executed
    #####:   80:        bugCount++;
        -:   81:    }
        -:   82:    else
        1:   83:        printf("Great! Council Room did add a buy for player.\n");
call    0 returned 100%
        -:   84:
        -:   85:    // check if Council Room altered other player's correctly: +1 draw, -1 in deck, same discard 
        1:   86:    printf("\nChecking if refactored Council Room card altered other player's hand.\n");
call    0 returned 100%
        1:   87:    if(prevG.handCount[1] != G.handCount[1] - 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   88:        printf("Bug!!! Other player add card to hand.\n");
call    0 never executed
    #####:   89:        bugCount++;
        -:   90:    }
        1:   91:    else if(prevG.deckCount[1] != G.deckCount[1] + 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   92:        printf("Bug!!! Other player didn't draw a card.\n");
call    0 never executed
    #####:   93:        bugCount++;
        -:   94:    }
        1:   95:    else if(prevG.discardCount[1] != G.discardCount[1]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   96:        printf("Bug!!! Council Room altered other player's discard pile.\n");
call    0 never executed
    #####:   97:        bugCount++;
        -:   98:    }
        -:   99:    else
        1:  100:        printf("Great! Other player correctly drew a card.\n");
call    0 returned 100%
        -:  101:    
        -:  102:    // check if Council Room altered the victory and kingdom piles
        1:  103:    printf("\nChecking if refactored Council Room card altered the Victory and Kingdom piles.\n");
call    0 returned 100%
        1:  104:    int arraySize = sizeof(G.supplyCount) / sizeof(int);
       28:  105:    for(i = 0; i < arraySize; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:  106:        if(G.supplyCount[i] != prevG.supplyCount[i]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  107:            flag = 1;
        -:  108:        }
        -:  109:    }
        1:  110:    if(flag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  111:        printf("Great! Council Room didn't alter the Victory and Kingdom piles.\n");
call    0 returned 100%
        -:  112:    else
        -:  113:    {
    #####:  114:        printf("Bug!!! Kingdom/Victory supplied have been altered!\n");
call    0 never executed
    #####:  115:        bugCount++;
        -:  116:    }
        -:  117:
        -:  118:    // output the test results overall
        1:  119:    printf("---------------------------------------------------\n");
call    0 returned 100%
        1:  120:    printf("Final Testing results of refactored Council Room card\n");
call    0 returned 100%
        1:  121:    printf("---------------------------------------------------\n");
call    0 returned 100%
        -:  122:
        1:  123:    if(bugCount == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  124:        printf("All tests passed for the refactored Council Room card!\n\n");
call    0 never executed
        -:  125:    else
        1:  126:        printf("Refactored Council Room card failed for %d condition(s), check above for which ones.\n\n", bugCount);
call    0 returned 100%
        -:  127:
        1:  128:    return 0;
        -:  129:}
