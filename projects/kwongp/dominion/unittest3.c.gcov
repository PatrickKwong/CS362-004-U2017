        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* -----------------------------------------------------------------------
        -:    2: * CS362-004 Summer 2017 Assignment 3
        -:    3: * unittest3.c
        -:    4: * 
        -:    5: * Patrick Kwong
        -:    6: * kwongp@oregonstate.edu
        -:    7: *
        -:    8: * Unit test for dominion function: updateCoins
        -:    9: * calculate players coin count during turn by
        -:   10: * adding treasure card(s) value in hand and bonus from cards played
        -:   11: * -----------------------------------------------------------------------
        -:   12: * Include the following lines in the makefile:
        -:   13: *
        -:   14: * unittest3: unittest3.c dominion.o rngs.o
        -:   15: *      gcc -o unittest3 -g unittest3.c dominion.o rngs.o $(CFLAGS)
        -:   16: */
        -:   17:
        -:   18:#include "dominion.h"
        -:   19:#include "dominion_helpers.h"
        -:   20:#include <string.h>
        -:   21:#include <stdio.h>
        -:   22:#include <assert.h>
        -:   23:#include "rngs.h"
        -:   24:#include <stdlib.h>
        -:   25:#include <time.h>
        -:   26:#include <math.h>
        -:   27:
function main called 1 returned 100% blocks executed 85%
        1:   28:int main() {
        -:   29:    int i;
        -:   30:    int seed;
        1:   31:    int numPlayer = 2;
        1:   32:    int maxBonus = 10;
        -:   33:    int p, handCount;
        1:   34:    int gameStatus = 0;
        1:   35:    int bugCount = 0;
        -:   36:    int bonus;
        1:   37:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   38:               , remodel, smithy, village, baron, great_hall};
        -:   39:    struct gameState G;
        1:   40:    int maxHandCount = 5;
        -:   41:    int moreTests[10];
        1:   42:    seed = (rand() % 100); // random seed
call    0 returned 100%
        -:   43:    // arrays of all coppers, silvers, and golds
        -:   44:    int coppers[MAX_HAND];
        -:   45:    int silvers[MAX_HAND];
        -:   46:    int golds[MAX_HAND];
      501:   47:    for (i = 0; i < MAX_HAND; i++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   48:    {
      500:   49:        coppers[i] = copper;
      500:   50:        silvers[i] = silver;
      500:   51:        golds[i] = gold;
        -:   52:    }
        -:   53:
        1:   54:    printf("Testing updateCoins function...\n");
call    0 returned 100%
        1:   55:    printf("Checking the updateCoins function provides correct coin count\n");
call    0 returned 100%
        1:   56:    printf("---------------------------------------------------------------------\n\n");
call    0 returned 100%
        3:   57:    for (p = 0; p < numPlayer; p++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:   58:    {
       12:   59:        for (handCount = 1; handCount <= maxHandCount; handCount++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   60:        {
      120:   61:            for (bonus = 0; bonus <= maxBonus; bonus++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:   62:            {
      110:   63:                printf("Test player %d with %d treasure card(s) and %d bonus.\n", p, handCount, bonus);
call    0 returned 100%
      110:   64:                memset(&G, 23, sizeof(struct gameState));   // clear the game state
      110:   65:                initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
      110:   66:                G.handCount[p] = handCount;                 // set the number of cards on hand
        -:   67:
        -:   68:                // all copper test
      110:   69:                memcpy(G.hand[p], coppers, sizeof(int) * handCount); // set all the cards to copper
      110:   70:                updateCoins(p, &G, bonus);
call    0 returned 100%
      110:   71:                printf("All Coopers = %d, expected = %d\n", G.coins, handCount * 1 + bonus);
call    0 returned 100%
      110:   72:                gameStatus = (G.coins == handCount * 1 + bonus); // check if the number of coins is correct
      110:   73:                if(gameStatus == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      110:   74:                    printf("Great! updateCoins function returned correct number of coins.\n\n");
call    0 returned 100%
        -:   75:                else
        -:   76:                {
    #####:   77:                    printf("BUG!!! updateCoins function returned wrong number of coins.\n\n");
call    0 never executed
    #####:   78:                    bugCount++;
        -:   79:                }
        -:   80:
        -:   81:                // all silver test
      110:   82:                memcpy(G.hand[p], silvers, sizeof(int) * handCount); // set all the cards to silver
      110:   83:                updateCoins(p, &G, bonus);
call    0 returned 100%
      110:   84:                printf("All Silvers = %d, expected = %d\n", G.coins, handCount * 2 + bonus);
call    0 returned 100%
      110:   85:                gameStatus = (G.coins == handCount * 2 + bonus); // check if the number of coins is correct
      110:   86:                if(gameStatus == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      110:   87:                    printf("Great! updateCoins function returned correct number of coins.\n\n");
call    0 returned 100%
        -:   88:                else
        -:   89:                {
    #####:   90:                    printf("BUG!!! updateCoins function returned wrong number of coins.\n\n");
call    0 never executed
    #####:   91:                    bugCount++;
        -:   92:                }
        -:   93:
        -:   94:                // all gold test
      110:   95:                memcpy(G.hand[p], golds, sizeof(int) * handCount); // set all the cards to gold
      110:   96:                updateCoins(p, &G, bonus);
call    0 returned 100%
      110:   97:                printf("All Golds = %d, expected = %d\n", G.coins, handCount * 3 + bonus);
call    0 returned 100%
      110:   98:                gameStatus = (G.coins == handCount * 3 + bonus); // check if the number of coins is correct
      110:   99:                if(gameStatus == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
      110:  100:                    printf("Great! updateCoins function returned correct number of coins.\n\n");
call    0 returned 100%
        -:  101:                else
        -:  102:                {
    #####:  103:                    printf("BUG!!! updateCoins function returned wrong number of coins.\n\n");
call    0 never executed
    #####:  104:                    bugCount++;
        -:  105:                }
        -:  106:            }
        -:  107:        }
        -:  108:    }
        -:  109:
        -:  110:
        -:  111:    // 5 card treasure mix test
        3:  112:    for(p = 0; p < numPlayer; p++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  113:    {
       24:  114:        for (bonus = 0; bonus <= maxBonus; bonus++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  115:        {
        -:  116:
        -:  117:            
       22:  118:            printf("Test player %d with 5 treasure cards (1 gold, 2 silver, 2 copper) & %d bonus.\n", p, bonus);
call    0 returned 100%
       22:  119:            seed = (rand() % 100); // random seed
call    0 returned 100%
       22:  120:            memset(&G, 23, sizeof(struct gameState));   // clear the game state
       22:  121:            initializeGame(numPlayer, k, seed, &G); // initialize new game
call    0 returned 100%
       22:  122:            G.handCount[p] = 5;
        -:  123:
       22:  124:            moreTests[0] = gold;
       22:  125:            moreTests[1] = silver;
       22:  126:            moreTests[2] = silver;
       22:  127:            moreTests[3] = copper;
       22:  128:            moreTests[4] = copper;
        -:  129:
       22:  130:            memcpy(G.hand[p], moreTests, sizeof(int) * 5); 
       22:  131:            updateCoins(p, &G, bonus);
call    0 returned 100%
       22:  132:            printf("1 Gold, 2 Silvers, 2 Coppers = %d, expected = %d\n", G.coins, (handCount * 1) + 3 + bonus); // 5 treasure, +1 for each silver and +2 for the gold
call    0 returned 100%
       22:  133:            gameStatus = (G.coins == (handCount * 1) + 3 + bonus);
        -:  134:            
       22:  135:            if(gameStatus == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       22:  136:                printf("Great! updateCoins function returned correct number of coins.\n\n");
call    0 returned 100%
        -:  137:            else
        -:  138:            {
    #####:  139:                printf("BUG!!! updateCoins function returned wrong number of coins.\n\n");
call    0 never executed
    #####:  140:                bugCount++;
        -:  141:            }
        -:  142:        }
        -:  143:    }
        -:  144:
        -:  145:    // 4 treasure mix with 1 kingdom card test
        3:  146:    for(p = 0; p < numPlayer; p++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  147:    {
       24:  148:        for (bonus = 0; bonus <= maxBonus; bonus++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  149:        {        
       22:  150:            printf("Test player %d with 5 treasure cards (1 gold, 2 silver, 1 copper, 1 Smithy) & %d bonus.\n", p, bonus);
call    0 returned 100%
       22:  151:            seed = (rand() % 100); // random seed
call    0 returned 100%
       22:  152:            memset(&G, 23, sizeof(struct gameState));   // clear the game state
       22:  153:            initializeGame(numPlayer, k, seed, &G); // initialize new game
call    0 returned 100%
       22:  154:            G.handCount[p] = 5;
        -:  155:
       22:  156:            moreTests[0] = gold;
       22:  157:            moreTests[1] = silver;
       22:  158:            moreTests[2] = silver;
       22:  159:            moreTests[3] = copper;
       22:  160:            moreTests[4] = smithy;
        -:  161:
       22:  162:            memcpy(G.hand[p], moreTests, sizeof(int) * 5); 
       22:  163:            updateCoins(p, &G, bonus);
call    0 returned 100%
       22:  164:            printf("1 Gold, 2 Silvers, 1 Coppers, 1 Smithy = %d, expected = %d\n", G.coins, (handCount * 1) + 2 + bonus);
call    0 returned 100%
       22:  165:            gameStatus = (G.coins == (handCount * 1) + 2 + bonus);
        -:  166:
       22:  167:            if(gameStatus == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       22:  168:                printf("Great! updateCoins function returned correct number of coins.\n\n");
call    0 returned 100%
        -:  169:            else
        -:  170:            {
    #####:  171:                printf("BUG!!! updateCoins function returned wrong number of coins.\n\n");
call    0 never executed
    #####:  172:                bugCount++;
        -:  173:            }
        -:  174:        }
        -:  175:    }
        -:  176:
        -:  177:    // 5 kingdom card test and no treasure
        3:  178:    for(p = 0; p < numPlayer; p++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  179:    {
       24:  180:        for (bonus = 0; bonus <= maxBonus; bonus++)
branch  0 taken 92%
branch  1 taken 8% (fallthrough)
        -:  181:        {        
       22:  182:            printf("Test player %d with 5 kingdom cards) & %d bonus.\n", p, bonus);
call    0 returned 100%
       22:  183:            seed = (rand() % 100); // random seed
call    0 returned 100%
       22:  184:            memset(&G, 23, sizeof(struct gameState));   // clear the game state
       22:  185:            initializeGame(numPlayer, k, seed, &G); // initialize new game
call    0 returned 100%
       22:  186:            G.handCount[p] = 5;
        -:  187:
       22:  188:            moreTests[0] = feast;
       22:  189:            moreTests[1] = gardens;
       22:  190:            moreTests[2] = village;
       22:  191:            moreTests[3] = baron;
       22:  192:            moreTests[4] = smithy;
        -:  193:
       22:  194:            memcpy(G.hand[p], moreTests, sizeof(int) * 5); 
       22:  195:            updateCoins(p, &G, bonus);
call    0 returned 100%
       22:  196:            printf("5 kingdom cards = %d, expected = %d\n", G.coins, 0 + bonus);
call    0 returned 100%
       22:  197:            gameStatus = (G.coins == 0 + bonus);
        -:  198:
       22:  199:            if(gameStatus == 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       22:  200:                printf("Great! updateCoins function returned correct number of coins.\n\n");
call    0 returned 100%
        -:  201:            else
        -:  202:            {
    #####:  203:                printf("BUG!!! updateCoins function returned wrong number of coins.\n\n");
call    0 never executed
    #####:  204:                bugCount++;
        -:  205:            }
        -:  206:        }
        -:  207:    }
        -:  208:
        -:  209:    // output the test results overall
        1:  210:    printf("---------------------------------------------\n");
call    0 returned 100%
        1:  211:    printf("Final Testing results of updateCoins function\n");
call    0 returned 100%
        1:  212:    printf("---------------------------------------------\n");
call    0 returned 100%
        1:  213:    if(bugCount == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  214:        printf("All tests passed for the updateCoins function!\n\n");
call    0 returned 100%
        -:  215:    else
    #####:  216:        printf("updateCoins failed provide correct number of coins for %d condition(s), check above for which ones.\n\n", bugCount);
call    0 never executed
        -:  217:    
        1:  218:    return 0;
        -:  219:}
