        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:
        -:    2:/* -----------------------------------------------------------------------
        -:    3: * CS362-004 Summer 2017 Assignment 3
        -:    4: * cardtest1.c
        -:    5: *
        -:    6: * Patrick Kwong
        -:    7: * kwongp@oregonstate.edu
        -:    8: * 
        -:    9: * Unit test for my refactored dominion card function: adventurer_func
        -:   10: * reveal cards from deck until you reveal 2 treasure cards
        -:   11: * put 2 treasure cards in hand and discarded other revealed cards
        -:   12: * 
        -:   13: * Used provided cardtest4.c and testUpdateCoins.c examples
        -:   14: * -----------------------------------------------------------------------
        -:   15: * Include the following lines in the makefile:
        -:   16: *
        -:   17: * cardtest1: cardtest1.c dominion.o rngs.o
        -:   18: *      gcc -o cardtest1 -g cardtest1.c dominion.o rngs.o $(CFLAGS)
        -:   19: */
        -:   20:
        -:   21:#include "dominion.h"
        -:   22:#include "dominion_helpers.h"
        -:   23:#include <string.h>
        -:   24:#include <stdio.h>
        -:   25:#include <assert.h>
        -:   26:#include "rngs.h"
        -:   27:#include <stdlib.h>
        -:   28:#include <time.h>
        -:   29:#include <math.h>
        -:   30:
function main called 1 returned 100% blocks executed 66%
        1:   31:int main() {
        -:   32:    int i;
        -:   33:    int seed;
        1:   34:    int numPlayer = 2;
        1:   35:    int bugCount = 0;
        1:   36:    int flag = 0;
        -:   37:    int prevCount, afterCount;
        1:   38:    int k[10] = {adventurer, council_room, feast, gardens, mine
        -:   39:               , remodel, smithy, village, baron, great_hall};
        -:   40:    struct gameState G, prevG;
        1:   41:    seed = (rand() % 100);
call    0 returned 100%
        -:   42:
        1:   43:    printf("\nTesting refactored adventurer card function\n");
call    0 returned 100%
        1:   44:    printf("-------------------------------------------\n");
call    0 returned 100%
        -:   45:    
        1:   46:    memset(&G, 23, sizeof(struct gameState));   // clear the game state
        1:   47:    initializeGame(numPlayer, k, seed, &G); // initialize a new game
call    0 returned 100%
        1:   48:    gainCard(adventurer, &G, 2, 0); // add adventurer card to player 1's hand
call    0 returned 100%
        -:   49:    
        1:   50:    memcpy(&prevG, &G, sizeof(struct gameState)); //create clone of game state to run tests on
        1:   51:    adventurer_func(&G);
call    0 returned 100%
        -:   52:    
        -:   53:    // get hand counts
        1:   54:    prevCount = prevG.handCount[0];
        1:   55:    afterCount = G.handCount[0];
        -:   56:
        -:   57:    // check if correct number of cards after refactored adventurer card
        1:   58:    printf("\nChecking if correct number of cards after using refactored adventurer card .\n");
call    0 returned 100%
        1:   59:    printf("Previous hand count: %d, After Adventurer: %d\n", prevCount, afterCount);
call    0 returned 100%
        1:   60:    printf("Expected hand count after Adventurer: 7 (+1 = +2 drawn from Adventurer and -1 from discarding Adventurer.\n");
call    0 returned 100%
        1:   61:    if(prevG.handCount[0]+1 != G.handCount[0]){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:   62:        printf("Bug!!! Ended with the incorrect number of cards in hand after Adventurer.\n");
call    0 returned 100%
        1:   63:        bugCount++;
        -:   64:    }
        -:   65:    else
    #####:   66:        printf("Great! Ended with the correct number of cards in hand after Adventurer.\n");
call    0 never executed
        -:   67:
        -:   68:    // check if adventurer added the only treasure cards to hand 
        1:   69:    printf("\nChecking if refactored adventurer card adds only treasure cards to hand.\n");
call    0 returned 100%
        1:   70:    if(G.hand[0][G.handCount[0]-2] != copper && G.hand[0][G.handCount[0]-2] != silver && G.hand[0][G.handCount[0]-2] != gold){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   71:        printf("Bug!!! Adventurer added a card beside a treasure.\n");
call    0 never executed
    #####:   72:        bugCount++;
        -:   73:    }
        1:   74:    else if(G.hand[0][G.handCount[0]-1] != copper && G.hand[0][G.handCount[0]-1] != silver && G.hand[0][G.handCount[0]-1] != gold){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:   75:        printf("Bug!!! Adventurer added a card beside a treasure.\n");
call    0 never executed
    #####:   76:        bugCount++;
        -:   77:    }
        -:   78:    else
        1:   79:        printf("Great! Adventurer added only treasure cards to hand.\n");
call    0 returned 100%
        -:   80:
        -:   81:    // check if adventurer drew enough cards from deck 
        1:   82:    printf("\nChecking if refactored adventurer card drew enough cards to hand.\n");
call    0 returned 100%
        1:   83:    if(prevG.deckCount[0]-2 < G.deckCount[0]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   84:        printf("Bug!!! Adventurer didn't draw enough cards from the deck.\n");
call    0 never executed
    #####:   85:        bugCount++;
        -:   86:    }
        -:   87:    else
        1:   88:        printf("Great! Adventurer drew enough cards from deck.\n");
call    0 returned 100%
        -:   89:
        -:   90:    // check if adventurer discarded the correct number cards to hand 
        1:   91:    printf("\nChecking if refactored adventurer card discarded correct number of cards to hand.\n");
call    0 returned 100%
        1:   92:    printf("Previous deck count: %d cards, After Adventurer: %d cards\n", prevG.deckCount[0], G.deckCount[0]);    
call    0 returned 100%
        1:   93:    printf("Previous discard count: %d cards, After Adventurer: %d cards\n", prevG.discardCount[0], G.discardCount[0]);
call    0 returned 100%
        1:   94:    printf("Expected deck count after Adventurer: %d card.\n", (prevG.deckCount[0] - 2));
call    0 returned 100%
        1:   95:    if((prevG.deckCount[0] - G.deckCount[0]) == (G.deckCount[0] - prevG.deckCount[0] + 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   96:        printf("Bug!!! Adventurer discarded the incorrect number of cards to hand.\n");
call    0 never executed
    #####:   97:        bugCount++;
        -:   98:    }
        -:   99:    else
        1:  100:        printf("Great! Adventurer discarded the correct number of cards to hand.\n");
call    0 returned 100%
        -:  101:
        -:  102:
        -:  103:    // check if Adventurer altered other player's cards
        1:  104:    printf("\nChecking if refactored adventurer card altered other player's hand.\n");
call    0 returned 100%
        1:  105:    if(prevG.handCount[1] != G.handCount[1]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  106:        printf("Bug!!! Adventurer altered other player's cards\n");
call    0 never executed
    #####:  107:        bugCount++;
        -:  108:    }
        1:  109:    else if(prevG.deckCount[1] != G.deckCount[1]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  110:        printf("Bug!!! Adventurer altered other player's cards\n");
call    0 never executed
    #####:  111:        bugCount++;
        -:  112:    }
        1:  113:    else if(prevG.discardCount[1] != G.discardCount[1]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  114:        printf("Bug!!! Adventurer altered other player's cards\n");
call    0 never executed
    #####:  115:        bugCount++;
        -:  116:    }
        -:  117:    else
        1:  118:        printf("Great! Adventurer didn't alter other player's cards.\n");
call    0 returned 100%
        -:  119:    
        -:  120:    // check if Adventurer altered the victory and kingdom piles
        1:  121:    printf("\nChecking if refactored adventurer card altered the Victory and Kingdom piles.\n");
call    0 returned 100%
        1:  122:    int arraySize = sizeof(G.supplyCount) / sizeof(int);
       28:  123:    for(i = 0; i < arraySize; i++){
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
       27:  124:        if(G.supplyCount[i] != prevG.supplyCount[i]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  125:            flag = 1;
        -:  126:        }
        -:  127:    }
        1:  128:    if(flag == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  129:        printf("Great! Adventurer didn't alter the Victory and Kingdom piles.\n");
call    0 returned 100%
        -:  130:    else
        -:  131:    {
    #####:  132:        printf("Bug!!! Kingdom/Victory supplied have been altered\n");
call    0 never executed
    #####:  133:        bugCount++;
        -:  134:    }
        -:  135:
        -:  136:    // output the test results overall
        1:  137:    printf("---------------------------------------------------\n");
call    0 returned 100%
        1:  138:    printf("Final Testing results of refactored adventurer card\n");
call    0 returned 100%
        1:  139:    printf("---------------------------------------------------\n");
call    0 returned 100%
        -:  140:
        1:  141:    if(bugCount == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  142:        printf("All tests passed for the refactored adventurer card!\n\n");
call    0 never executed
        -:  143:    else
        1:  144:        printf("refactored adventurer card failed for %d condition(s), check above for which ones.\n\n", bugCount);
call    0 returned 100%
        -:  145:    
        1:  146:    return 0;
        -:  147:}
